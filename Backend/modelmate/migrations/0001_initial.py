# Generated by Django 5.1.1 on 2025-07-04 04:13

import django.contrib.auth.models
import django.contrib.auth.validators
import django.core.validators
import django.db.models.deletion
import django.utils.timezone
import modelmate.models
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='AIModel',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(db_index=True, max_length=255)),
                ('creator', models.CharField(db_index=True, max_length=255)),
                ('version', models.CharField(blank=True, max_length=255)),
                ('description', models.TextField(blank=True, null=True)),
                ('url', models.URLField(blank=True, null=True)),
                ('release_date', models.DateField(blank=True, db_index=True, null=True)),
                ('size', models.CharField(blank=True, max_length=100)),
                ('architecture', models.CharField(blank=True, max_length=100)),
                ('license', models.CharField(blank=True, max_length=100)),
                ('average_rating', models.DecimalField(db_index=True, decimal_places=2, default=0.0, max_digits=3)),
                ('reviews_count', models.PositiveIntegerField(db_index=True, default=0)),
            ],
            options={
                'ordering': ['-average_rating', 'name'],
            },
        ),
        migrations.CreateModel(
            name='User',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('first_name', models.CharField(blank=True, max_length=150, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('email', models.EmailField(blank=True, max_length=254, verbose_name='email address')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('bio', models.TextField(blank=True, help_text='Brief description about yourself')),
                ('location', models.CharField(blank=True, max_length=255)),
                ('profile_picture', models.ImageField(blank=True, null=True, upload_to='profile_pics/', validators=[modelmate.models.validate_image_file_size, django.core.validators.FileExtensionValidator(allowed_extensions=['jpg', 'jpeg', 'png', 'gif'])])),
                ('website', models.URLField(blank=True)),
                ('linkedin', models.URLField(blank=True)),
                ('github', models.URLField(blank=True)),
                ('expertise_areas', models.TextField(blank=True, help_text='Areas of expertise')),
                ('reviews_count', models.PositiveIntegerField(db_index=True, default=0)),
                ('discussions_count', models.PositiveIntegerField(db_index=True, default=0)),
                ('helpful_votes_received', models.PositiveIntegerField(db_index=True, default=0)),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.permission', verbose_name='user permissions')),
            ],
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name='Discussion',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('title', models.CharField(db_index=True, max_length=200)),
                ('content', models.TextField()),
                ('likes', models.PositiveIntegerField(db_index=True, default=0)),
                ('views', models.PositiveIntegerField(db_index=True, default=0)),
                ('comments_count', models.PositiveIntegerField(db_index=True, default=0)),
                ('model', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='discussions', to='modelmate.aimodel')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='discussions', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='Comment',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('content', models.TextField()),
                ('likes', models.PositiveIntegerField(db_index=True, default=0)),
                ('parent', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='replies', to='modelmate.comment')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='comments', to=settings.AUTH_USER_MODEL)),
                ('discussion', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='comments', to='modelmate.discussion')),
            ],
            options={
                'ordering': ['created_at'],
            },
        ),
        migrations.CreateModel(
            name='ModelCategory',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('name', models.CharField(db_index=True, max_length=255, unique=True)),
                ('description', models.TextField(blank=True, null=True)),
                ('slug', models.SlugField(unique=True)),
            ],
            options={
                'verbose_name_plural': 'Model Categories',
                'ordering': ['name'],
                'indexes': [models.Index(fields=['name'], name='modelmate_m_name_c497c3_idx'), models.Index(fields=['slug'], name='modelmate_m_slug_f9a40b_idx')],
            },
        ),
        migrations.AddField(
            model_name='aimodel',
            name='category',
            field=models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='models', to='modelmate.modelcategory'),
        ),
        migrations.CreateModel(
            name='Review',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('accuracy', models.IntegerField(validators=[django.core.validators.MinValueValidator(1), django.core.validators.MaxValueValidator(5)])),
                ('speed', models.IntegerField(validators=[django.core.validators.MinValueValidator(1), django.core.validators.MaxValueValidator(5)])),
                ('cost_efficiency', models.IntegerField(validators=[django.core.validators.MinValueValidator(1), django.core.validators.MaxValueValidator(5)])),
                ('ease_of_use', models.IntegerField(validators=[django.core.validators.MinValueValidator(1), django.core.validators.MaxValueValidator(5)])),
                ('reliability', models.IntegerField(validators=[django.core.validators.MinValueValidator(1), django.core.validators.MaxValueValidator(5)])),
                ('overall_rating', models.FloatField(db_index=True, editable=False, validators=[django.core.validators.MinValueValidator(1), django.core.validators.MaxValueValidator(5)])),
                ('title', models.CharField(max_length=200)),
                ('description', models.TextField()),
                ('pros', models.TextField(blank=True)),
                ('cons', models.TextField(blank=True)),
                ('helpful_votes', models.PositiveIntegerField(db_index=True, default=0)),
                ('model', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='reviews', to='modelmate.aimodel')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='reviews', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'ordering': ['-created_at'],
            },
        ),
        migrations.AddIndex(
            model_name='user',
            index=models.Index(fields=['username'], name='modelmate_u_usernam_50164a_idx'),
        ),
        migrations.AddIndex(
            model_name='user',
            index=models.Index(fields=['email'], name='modelmate_u_email_85d114_idx'),
        ),
        migrations.AddIndex(
            model_name='user',
            index=models.Index(fields=['-reviews_count'], name='modelmate_u_reviews_ef8ab2_idx'),
        ),
        migrations.AddIndex(
            model_name='aimodel',
            index=models.Index(fields=['name'], name='modelmate_a_name_78ed0c_idx'),
        ),
        migrations.AddIndex(
            model_name='aimodel',
            index=models.Index(fields=['creator'], name='modelmate_a_creator_57c2fa_idx'),
        ),
        migrations.AddIndex(
            model_name='aimodel',
            index=models.Index(fields=['-average_rating'], name='modelmate_a_average_b0d3e1_idx'),
        ),
        migrations.AddIndex(
            model_name='aimodel',
            index=models.Index(fields=['-release_date'], name='modelmate_a_release_e70041_idx'),
        ),
        migrations.AddIndex(
            model_name='aimodel',
            index=models.Index(fields=['category', '-average_rating'], name='modelmate_a_categor_a8d4e7_idx'),
        ),
        migrations.AlterUniqueTogether(
            name='aimodel',
            unique_together={('name', 'creator')},
        ),
        migrations.AlterUniqueTogether(
            name='review',
            unique_together={('user', 'model')},
        ),
    ]
